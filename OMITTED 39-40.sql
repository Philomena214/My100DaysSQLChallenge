--  DAY 39 (CUMMULATIVE DISTRIBUTION)
/* CASE STUDY: Using the Sales and Adverts table retrieve the cummulative distribution of the revenue generated
from each product quantity order by customers, and returning that of the monthly expenditure spent on adverts by
the business.*/
SELECT * FROM sales;
SELECT * FROM adverts;

-- Cummulative distribution of revenue generated on order quantity
SELECT order_quantity,
		SUM(revenue) AS total_rev_gen,
		CUME_DIST() OVER (ORDER BY order_quantity ASC) AS cumm_dist
FROM sales
GROUP BY order_quantity;

-- Cummulative distribution of monthly advert expenditure
SELECT MONTH(ad_date) AS ad_month,
		SUM(spend) AS total_ad_expenditure,
		CUME_DIST() OVER (ORDER BY MONTH(ad_date) ASC) AS cumm_dist
FROM adverts
GROUP BY MONTH(ad_date);

-- DAY 40 (PERCENTILE FUNCTION)
/* CASE STUDY: A business entity that operates a franchise wants to undrstand their best performing products.
As a data analyst, write a query to generate the following insights*/
USE SQL1OOChallenge;

SELECT * FROM customers;
SELECT * FROM products;

/* PERCENTILE_RANK
Retrieve the total revenue generated by the products sold by the business and the percentile distribution of the
revenue since the business inception.*/
SELECT p.product_category,
		ROUND(SUM(s.revenue), 2) AS total_sales_order,
		CONCAT((100.00 * ROUND(PERCENT_RANK() OVER(ORDER BY ROUND(SUM(s.revenue), 2) ASC),3)), '%') AS
        percent_rev_distribution
FROM products p
JOIN sales s
ON p.product_id = s.product_id
GROUP BY p.product_category;

/* PERCENTILE_CONT (Cannot be used in MySQL)
Retrieve the median value (50th Percentile) of the total revenue generated by the product since inception*/
 SELECT p.product_category,
		ROUND(SUM(s.revenue), 2) AS total_sales_order,
		PERCENTILE_CONT(0.5) WITHIN GROUP(ORDER BY ROUND(SUM(s.revenue), 2) DESC) OVER() AS median_sales
FROM products p
JOIN sales s
ON p.product_id = s.product_id
GROUP BY p.product_category;

/* PERCENTILE_DISC (Cannot be used in MySQL)
Return products that have generated more than the median value to the business*/
 SELECT p.product_category,
		ROUND(SUM(s.revenue), 2) AS total_sales_order
FROM products p
JOIN sales s
ON p.product_id = s.product_id
GROUP BY p.product_category
HAVING ROUND(SUM(s.revenue), 2 = (SELECT DISTINCT(PERCENTILE_DISC(0.5) WITHIN GROUP(ORDER BY 
									ROUND(SUM(s.revenue), 2) DESC) OVER()) AS median_sales
						FROM products p
						JOIN sales s
						ON p.product_id = s.product_id
						GROUP BY p.product_name)
ORDER BY total_sales_order DESC;